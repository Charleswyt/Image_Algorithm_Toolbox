# coding=utf-8

"""
Image_Algorithm_Toolbox
Resize pic to defined size.

__author__ = 'JNingWei'
"""

import os
import cv2


def dst_check(dst):
    import shutil
    try:
        shutil.rmtree(dst)
    except OSError:
        pass
    os.makedirs(dst)


def get_path_lists(src):
    check_suffix = lambda x : True if os.path.splitext(x)[1] in [".jpg", ".JPG", ".png", ".PNG"] else False
    src_image_paths = [os.path.join(src, name) for name in os.listdir(src) if check_suffix(name)]
    assert len(src_image_paths)
    src_image_paths.sort()
    src_label_paths = [path.replace(os.path.splitext(path)[1], ".txt") for path in src_image_paths]
    dst_image_paths = [path.replace("src", "dst").replace(os.path.splitext(path)[1], os.path.splitext(path)[1].lower()) for path in src_image_paths]
    dst_label_paths = [path.replace("src", "dst").replace(os.path.splitext(path)[1], ".txt") for path in src_image_paths]
    return src_image_paths, src_label_paths, dst_image_paths, dst_label_paths


def get_image_size(image_path):
    image = cv2.imread(image_path)
    h, w = image.shape[:2]
    h_max, w_max = h - 1, w - 1
    return h_max, w_max


def enhance_image(src_image_path, dst_image_path, h_flip, v_flip, hv_flip):
    image = cv2.imread(src_image_path)
    if True:
        # Original image 原图像
        cv2.imwrite(os.path.splitext(dst_image_path)[0]+"-o"+os.path.splitext(dst_image_path)[1], image)
    if h_flip:
        # Flipped Horizontally 图像水平翻转
        h_flip = cv2.flip(image, 1)
        cv2.imwrite(os.path.splitext(dst_image_path)[0]+"-h"+os.path.splitext(dst_image_path)[1], h_flip)
    if v_flip:
        # Flipped Vertically 图像垂直翻转
        v_flip = cv2.flip(image, 0)
        cv2.imwrite(os.path.splitext(dst_image_path)[0]+"-v"+os.path.splitext(dst_image_path)[1], v_flip)
    if hv_flip:
        # Flipped Horizontally & Vertically 图像水平垂直翻转
        hv_flip = cv2.flip(image, -1)
        cv2.imwrite(os.path.splitext(dst_image_path)[0]+"-hv"+os.path.splitext(dst_image_path)[1], hv_flip)


def enhance_label(src_label_path, dst_label_path, h_flip, v_flip, h_v_flip, h, w):
    r_file = open(src_label_path, "r")
    lines = r_file.readlines()
    _, messages = lines[0], lines[1:]
    r_file.close()
    if True:
        # Original label
        o_file = open(os.path.splitext(dst_label_path)[0]+"-o"+os.path.splitext(dst_label_path)[1], "w")
        o_file.writelines(lines[0])
        o_file.writelines(messages)
        o_file.close()
    if h_flip:
        # Flipped Horizontally 水平翻转
        h_file = open(os.path.splitext(dst_label_path)[0]+"-h"+os.path.splitext(dst_label_path)[1], "w")
        h_file.writelines(lines[0])
        for mess in messages:
            if mess.split():
                x1, y1, x2, y2 = map(int, mess.split())
                x1_new = w - x1
                y1_new = y1
                x2_new = w - x2
                y2_new = y2
                new_mess = "{0} {1} {2} {3}\n".format(x1_new, y1_new, x2_new, y2_new)
                h_file.writelines(new_mess)
        h_file.close()
    if v_flip:
        # Flipped Vertically 垂直翻转
        v_file = open(os.path.splitext(dst_label_path)[0]+"-v"+os.path.splitext(dst_label_path)[1], "w")
        v_file.writelines(lines[0])
        for mess in messages:
            if mess.split():
                x1, y1, x2, y2 = map(int, mess.split())
                x1_new = x1
                y1_new = h - y1
                x2_new = x2
                y2_new = h - y2
                new_mess = "{0} {1} {2} {3}\n".format(x1_new, y1_new, x2_new, y2_new)
                v_file.writelines(new_mess)
        v_file.close()
    if hv_flip:
        # Flipped Horizontally & Vertically 水平垂直翻转
        hv_file = open(os.path.splitext(dst_label_path)[0]+"-hv"+os.path.splitext(dst_label_path)[1], "w")
        hv_file.writelines(lines[0])
        for mess in messages:
            if mess.split():
                x1, y1, x2, y2 = map(int, mess.split())
                x1_new = w - x1
                y1_new = h - y1
                x2_new = w - x2
                y2_new = h - y2
                new_mess = "{0} {1} {2} {3}\n".format(x1_new, y1_new, x2_new, y2_new)
                hv_file.writelines(new_mess)
        hv_file.close()


def main(src, dst, h_flip, v_flip, hv_flip):
    dst_check(dst)
    src_image_paths, src_label_paths, dst_image_paths, dst_label_paths = get_path_lists(src)
    for (src_image_path, src_label_path, dst_image_path, dst_label_path) in zip(src_image_paths, src_label_paths, dst_image_paths, dst_label_paths):
        h_max, w_max = get_image_size(src_image_path)
        enhance_image(src_image_path, dst_image_path, h_flip, v_flip, hv_flip)
        enhance_label(src_label_path, dst_label_path, h_flip, v_flip, hv_flip, h_max, w_max)


if __name__ == "__main__":
    SRC = './src'    # dir for origin pics
    DST = './dst'    # dir for resized pics
    h_flip = True    # horizontal
    v_flip = True    # vertical
    hv_flip = True   # both horizontal and vertical
    main(SRC, DST, h_flip, v_flip, hv_flip)


import os
import shutil
import logging

from lib import global_parameter

total_folder = global_parameter.total_folder
distribute_folder = global_parameter.distribute_folder

per_person_per_day_num = global_parameter.per_person_per_day_num
person_names = global_parameter.person_names

person_num = len(person_names)
if not os.path.isdir(total_folder):
    logging.ERROR('Total_folder does not exist .')
    exit(1)
try:
    shutil.rmtree(distribute_folder)
except OSError:
    pass
os.mkdir(distribute_folder)

person_folders = []
for person_name in person_names:
    person_folders.append(os.path.join(distribute_folder, person_name))
for person_folder in person_folders:
    try:
        os.mkdir(person_folder)
    except OSError:
        pass
# #############
#     txt_path = os.path.join(person_folder, 'num.txt')
#     f = open(txt_path, 'w')
#     f.write('Haha\n')
#     f.write('0')
#     f.close()
# #############
result_image_paths = [os.path.join(total_folder, name) for name in os.listdir(total_folder)
                      if os.path.isfile(os.path.join(total_folder, name))]
result_image_paths.sort()
per_box = []
pic_index = 0
person_index = -1
for result_image_path in result_image_paths:
    per_box.append(result_image_path)
    pic_index += 1
    if pic_index >= 50:
        person_index += 1

        # #############
        # num_txt_path_specify = os.path.join(person_folders[person_index], 'num.txt')
        # f = open(num_txt_path_specify, 'r')
        # a = f.readlines().strip('\n'')
        # print a
        # box_num = int(f.readlines()[1]) + 1
        # f.close()
        # print a
        # print 'box_num = {}'.format(box_num)
        # f = open(num_txt_path_specify, 'w+')
        # a[1] = str(box_num)
        # print a
        # f.write(str(a))
        # f.close()
        # ############
        # print 'box_num = {}'.format(box_num)
        #
        # #############

        box_num = len(os.listdir(str(person_folders[person_index]))) + 1
        sub_box_path_specify = os.path.join(person_folders[person_index], str(box_num))
        if os.path.exists(sub_box_path_specify):
            # ########
            # print 'sub_box_path_specify = {}'.format(sub_box_path_specify)
            # ########
            logging.ERROR('{} already exists .'.format(sub_box_path_specify))
            exit(1)
        os.mkdir(sub_box_path_specify)
        for per_pic in per_box:
            shutil.copy(per_pic, sub_box_path_specify)

        if person_index >= person_num-1:
            person_index = -1
        per_box = []
        pic_index = 0
print '\n\nDistribution has been done !'




# list.py
naive_folder = '../video'
avi_path_list = '../generated_file/avi_path.txt'
avi_path_list_2 = '../generated_file/avi_path_2.txt'

# extract_frame.py
extract_folder = '../generated_file/extract_folder'

# filter.py
limited_num = 5

# distribute
total_folder = '../generated_file/extract_folder'
distribute_folder = '../generated_file/distribute_folder'

per_person_per_day_num = 50
person_names = ['Li.Jun', 'Lin.Jian', 'Wang.Qianyu', 'Cao.Wenqiang']

